import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as n}from"./app-cGHsJGw-.js";const s="/vuepress/assets/2023-10-28_210446_8368250.7028612527860615-fo0jpWno.png",i="/vuepress/assets/2023-10-28_210446_5121270.7331623613750995-Dxsd30yR.png",o="/vuepress/assets/2023-10-28_210446_0427160.28375706000738377-DagoJzmM.png",d="/vuepress/assets/2023-10-28_210446_6784960.08746525783246062-DvQwWGD9.png",p="/vuepress/assets/2023-10-28_210446_2000620.5164640989636067-B54I8A1C.png",r="/vuepress/assets/2023-10-28_210447_0240130.13349492167582067-DbEX2jwT.png",c="/vuepress/assets/2023-10-28_210447_1401560.466946019165557-Cw0ihDFQ.png",l="/vuepress/assets/2023-10-28_210447_3110040.7263486984825372-4qI3N4gK.png",g="/vuepress/assets/2023-10-28_210447_5602860.359201119840145-BUCcFE0Z.png",_="/vuepress/assets/2023-10-28_210447_4342440.2520840212384978-BuQb-MFG.png",u="/vuepress/assets/2023-10-28_210447_3565090.28144308056862244-LSo2Ry-s.png",m="/vuepress/assets/2023-10-28_210447_6556380.6807473393841982-C-_k0boz.png",h="/vuepress/assets/2023-10-28_210447_7396320.6731009208128816-C5cAB18k.png",f="/vuepress/assets/2023-10-28_210447_8898360.35279553821691434-BMhdPwNp.png",y="/vuepress/assets/2023-10-28_210448_0344880.6239992097474373-C9Ts4dJW.png",b={},x=n('<h1 id="一、环境" tabindex="-1"><a class="header-anchor" href="#一、环境"><span>一、环境</span></a></h1><table id="28d744bc" class="ne-table" style="table-layout:fixed;border-collapse:collapse;border:1px solid #d9d9d9;width:748px;"><tbody><tr style="height:33px;"><td width="187" style="border:1px solid #d9d9d9;"><p id="u105eede9" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">主机名</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="uf5725919" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">IP地址</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="u1bcad78e" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">系统</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="u29fffd16" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">说明</span></p></td></tr><tr style="height:33px;"><td width="187" style="border:1px solid #d9d9d9;"><p id="u3a65ca24" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">localhost</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="ueb89b8d5" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">192.168.11.61</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="ub4f80b8e" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">Ubuntu 20.04</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="u63046006" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">docker安装的prometheus，grafana版本：9.4.3</span></p></td></tr><tr style="height:33px;"><td width="187" style="border:1px solid #d9d9d9;"><p id="u8244d097" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">test</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="u5bdc0a11" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">192.168.11.62</span></p></td><td width="187" style="border:1px solid #d9d9d9;"><p id="u74f51fe5" class="ne-p" style="margin:0;padding:0;min-height:24px;"><span class="ne-text">Ubuntu 20.04</span></p></td><td width="187" style="border:1px solid #d9d9d9;"></td></tr></tbody></table><h1 id="二、grafana添加表格面板" tabindex="-1"><a class="header-anchor" href="#二、grafana添加表格面板"><span>二、Grafana添加表格面板</span></a></h1><h2 id="添加表格面板" tabindex="-1"><a class="header-anchor" href="#添加表格面板"><span>添加表格面板</span></a></h2><p>接下来我们以统计服务器资源为例，对表格面板的使用进行说明。比如通过表格展示Linux服务器总内存、总 CPU 数、带宽等信息，接下来分别添加如下查询：</p><ul><li><p>总内存：<code>node_memory_MemTotal_bytes{instance=~&quot;$instance&quot;}</code></p></li><li><p>CPU 核数：<code>count(node_cpu_seconds_total{instance=~&quot;$instance&quot;, mode=&#39;system&#39;}) by (instance)</code></p></li><li><p>连接数：<code>node_netstat_Tcp_CurrEstab{instance=~&quot;$instance&quot;}</code></p></li><li><p>下行带宽：<code>max(rate(node_network_receive_bytes_total{instance=~&quot;$instance&quot;}[$interval])*8) by (instance)</code></p></li><li><p>上行带宽：<code>max(rate(node_network_transmit_bytes_total{instance=~&quot;$instance&quot;}[$interval])*8) by (instance)</code></p></li></ul><p>如还有其他需要展示的也可以直接添加新的查询即可</p><p>在 Dashboard 中添加添加一个空的 Panel 面板，进入面板编辑器后在右侧上方选择 <code>Table</code> 面板：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加完成后如下图：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到数据是以时间序列展示的，我们需要修改下：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当每个query都修改后，就变成了如下图：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="表格转换" tabindex="-1"><a class="header-anchor" href="#表格转换"><span>表格转换</span></a></h2><p>现在我们将所有需要展示的信息都通过 <code>Table</code> 形式展示出来了，但是现在有一个很大的问题，就是需要对每一个查询切换显示：</p><ul><li>每一个query显示一个表格（因为有5个query，所以有5个表格可以选择）</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这显然是非常不友好的显示方式，我们需要将这些表格内容合并成一个表格进行展示，这个时候就需要用到 Grafana 的 <code>Transform</code> 转换功能了，在 <code>Transform</code> 选项卡中选择 <code>Merge</code> 选项</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>Merge</code> 转换器可以合并多个序列或者多个表格为一个表格，其中可合并的值将合并到同一行中，用于显示在表格中可视化的多个序列、表格或两者的组合。当我们选择了 <code>Merge</code> 转换器过后就会将上面的多个查询结果合并成一个表格。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但其实合并后的表格数据有一些地方没有显示，这是因为我们查询的结果实际上是包含 <code>__name__</code> 这个标签的，在合并的时候会造成数据丢失，我们可以将所有的查询语句后面添加上一个 <code>- 0</code> 来去掉这个标签，这样合并的时候就不会丢失数据了。比如查询主机信息的语句变成 <code>node_uname_info{job=&quot;node-exporter&quot;} - 0</code>，其他的语句也都加上 <code>- 0</code> 这个操作。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>全部加上-0后，PromQL表达式变成如下：</p><ul><li><p>总内存：<code>node_memory_MemTotal_bytes{instance=~&quot;$instance&quot;} - 0</code></p></li><li><p>CPU 核数：<code>count(node_cpu_seconds_total{instance=~&quot;$instance&quot;, mode=&#39;system&#39;}) by (instance) - 0</code></p></li><li><p>连接数：<code>node_netstat_Tcp_CurrEstab{instance=~&quot;$instance&quot;} - 0</code></p></li><li><p>下载带宽：<code>max(rate(node_network_receive_bytes_total{instance=~&quot;$instance&quot;}[$interval])*8) by (instance) - 0</code></p></li><li><p>上传带宽：<code>max(rate(node_network_transmit_bytes_total{instance=~&quot;$instance&quot;}[$interval])*8) by (instance) - 0</code></p></li></ul><p>数据虽然正确了，但是表头却看不出来是表达的什么意义，有的列还是不需要的，这个时候同样也要用到 <code>Transform</code> 转换器了，这里我们需要用到的是 <code>Organize fields</code> 转换器，该转换器允许用户重新排序、隐藏或重命名字段或者列。</p><p><img src="'+g+'" alt="" loading="lazy">这里我们将不需要的一些列隐藏掉了，将表头进行了重命名。</p><h2 id="属性覆盖" tabindex="-1"><a class="header-anchor" href="#属性覆盖"><span>属性覆盖</span></a></h2><p>上面我们将查询的数据结果用一个表格展示出来了，但是现在我们的数据都是直接的一个结果，我们需要进行转换加上我们的单位。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如对于<strong>总内存</strong>这一列，我们需要添加覆盖，设置一个 bytes 类型的单位，然后会根据我们的结果进行自动转换：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样对下行和上行宽带这两列的数据结果进行覆盖，添加 <code>bytes/sec(IEC)</code> 类型的单位：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外在定制某列数据的显示效果的时候我们还可以为其配置背景颜色，只需要设置<code>Cell Options&gt;Cell Type</code> ，该属性可以配置文本颜色、背景等方式：如下图：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改背景颜色为绿色：</p><p>Shandard options &gt; Color scheme 如下图：</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="三、我的微信" tabindex="-1"><a class="header-anchor" href="#三、我的微信"><span>三、我的微信</span></a></h1><p>如果碰到问题，可以随时加我微信，谢谢</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',44),v=[x];function q(C,w){return a(),t("div",null,v)}const B=e(b,[["render",q],["__file","6.3.Grafana添加表格面板.html.vue"]]),P=JSON.parse('{"path":"/note/Prometheus/6.3.Grafana%E6%B7%BB%E5%8A%A0%E8%A1%A8%E6%A0%BC%E9%9D%A2%E6%9D%BF.html","title":"6.3.Grafana添加表格面板","lang":"zh-CN","frontmatter":{"title":"6.3.Grafana添加表格面板","order":38,"icon":"lightbulb","description":"一、环境 二、Grafana添加表格面板 添加表格面板 接下来我们以统计服务器资源为例，对表格面板的使用进行说明。比如通过表格展示Linux服务器总内存、总 CPU 数、带宽等信息，接下来分别添加如下查询： 总内存：node_memory_MemTotal_bytes{instance=~\\"$instance\\"} CPU 核数：count(node_c...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/vuepress/note/Prometheus/6.3.Grafana%E6%B7%BB%E5%8A%A0%E8%A1%A8%E6%A0%BC%E9%9D%A2%E6%9D%BF.html"}],["meta",{"property":"og:site_name","content":"风华"}],["meta",{"property":"og:title","content":"6.3.Grafana添加表格面板"}],["meta",{"property":"og:description","content":"一、环境 二、Grafana添加表格面板 添加表格面板 接下来我们以统计服务器资源为例，对表格面板的使用进行说明。比如通过表格展示Linux服务器总内存、总 CPU 数、带宽等信息，接下来分别添加如下查询： 总内存：node_memory_MemTotal_bytes{instance=~\\"$instance\\"} CPU 核数：count(node_c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"风华"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.3.Grafana添加表格面板\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"风华\\",\\"url\\":\\"/portfolio\\"}]}"]]},"headers":[{"level":2,"title":"添加表格面板","slug":"添加表格面板","link":"#添加表格面板","children":[]},{"level":2,"title":"表格转换","slug":"表格转换","link":"#表格转换","children":[]},{"level":2,"title":"属性覆盖","slug":"属性覆盖","link":"#属性覆盖","children":[]}],"git":{},"readingTime":{"minutes":4.84,"words":1453},"filePathRelative":"note/Prometheus/6.3.Grafana添加表格面板.md","autoDesc":true}');export{B as comp,P as data};

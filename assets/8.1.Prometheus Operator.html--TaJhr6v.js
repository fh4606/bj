import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o,d as t}from"./app-Bna6fuy1.js";const s="/assets/2023-10-28_210600_9211680.31924985719782395-DCOr0b0-.png",a={},p=t('<p>一般在Kubernetes管理和部署Prometheus，我们使用ConfigMap了管理Prometheus配置文件。每次对Prometheus配置文件进行升级时，我们需要手动移除已经运行的Pod实例，从而让Kubernetes可以使用最新的配置文件创建Prometheus。 而如果当应用实例的数量更多时，通过手动的方式部署和升级Prometheus过程繁琐并且效率低下。</p><p>但实际上对 Kubernetes 来说，还有更简单方式来监控报警，那就是 <a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener noreferrer">Prometheus Operator</a>。Prometheus Operator 为监控 Kubernetes 资源和 Prometheus 实例的管理提供了简单的定义，简化在 Kubernetes 上部署、管理和运行 Prometheus 和 Alertmanager 集群。</p><h2 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍"><span>1、介绍</span></a></h2><p>首先我们先来了解下 Prometheus-Operator 的架构图：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图是<code>Prometheus-Operator</code>官方提供的架构图，其中<code>Operator</code>是最核心的部分，作为一个控制器，他会去创建<code>Prometheus</code>、<code>ServiceMonitor</code>、<code>AlertManager</code>以及<code>PrometheusRule</code>4个<code>CRD</code>资源对象，然后会一直监控并维持这4个资源对象的状态。</p><p>这样我们要在集群中监控什么数据，就变成了直接去操作 Kubernetes 集群的资源对象了，是不是方便很多了。</p><p><code>prometheus</code>这种资源对象就是作为<code>Prometheus Server</code>存在，而<code>ServiceMonitor</code>就是对<code>exporter</code>的配置，<code>exporter</code>前面我们已经学习了，是用来提供专门提供<code>metrics</code>数据接口的工具，<code>Prometheus</code>就是通过<code>ServiceMonitor</code>的配置去 pull 数据的，当然<code>alertmanager</code>这种资源对象就是对应的<code>AlertManager</code>的抽象，而<code>PrometheusRule</code>是用来被<code>Prometheus</code>实例使用的报警规则文件。<code>Service</code>简单的说就是 <code>Prometheus</code>监控的对象。</p><h2 id="_2、自定义资源" tabindex="-1"><a class="header-anchor" href="#_2、自定义资源"><span>2、自定义资源</span></a></h2><p>Prometheus Operater 定义了如下的四类自定义资源：</p><ul><li><p>Prometheus：声明式创建和管理Prometheus Server实例；</p></li><li><p>ServiceMonitor：负责声明式的管理监控配置；</p></li><li><p>PrometheusRule：负责声明式的管理告警配置；</p></li><li><p>Alertmanager：声明式的创建和管理Alertmanager实例。</p></li></ul><p>例如：当我们创建serviceMonitor后</p><p>Opertor发现到创建的serviceMonitor后，生成prometheus crd（自定义资源对象），也就是一系列Job组成的Prometheus监控对象。在根据prometheus crd（自定义资源对象）的定义生成prometheus server的配置文件</p><h2 id="_3、总结" tabindex="-1"><a class="header-anchor" href="#_3、总结"><span>3、总结</span></a></h2><p>简言之，Prometheus Operator能够帮助用户自动化的创建以及管理Prometheus Server以及其相应的配置</p>',15),c=[p];function n(h,i){return o(),r("div",null,c)}const d=e(a,[["render",n],["__file","8.1.Prometheus Operator.html.vue"]]),l=JSON.parse('{"path":"/note/Prometheus/8.1.Prometheus%20Operator.html","title":"8.1.Prometheus Operator","lang":"zh-CN","frontmatter":{"title":"8.1.Prometheus Operator","order":43,"icon":"lightbulb","description":"一般在Kubernetes管理和部署Prometheus，我们使用ConfigMap了管理Prometheus配置文件。每次对Prometheus配置文件进行升级时，我们需要手动移除已经运行的Pod实例，从而让Kubernetes可以使用最新的配置文件创建Prometheus。 而如果当应用实例的数量更多时，通过手动的方式部署和升级Prometheus...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/note/Prometheus/8.1.Prometheus%20Operator.html"}],["meta",{"property":"og:site_name","content":"风华"}],["meta",{"property":"og:title","content":"8.1.Prometheus Operator"}],["meta",{"property":"og:description","content":"一般在Kubernetes管理和部署Prometheus，我们使用ConfigMap了管理Prometheus配置文件。每次对Prometheus配置文件进行升级时，我们需要手动移除已经运行的Pod实例，从而让Kubernetes可以使用最新的配置文件创建Prometheus。 而如果当应用实例的数量更多时，通过手动的方式部署和升级Prometheus..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"风华"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.1.Prometheus Operator\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"风华\\",\\"url\\":\\"/portfolio\\"}]}"]]},"headers":[{"level":2,"title":"1、介绍","slug":"_1、介绍","link":"#_1、介绍","children":[]},{"level":2,"title":"2、自定义资源","slug":"_2、自定义资源","link":"#_2、自定义资源","children":[]},{"level":2,"title":"3、总结","slug":"_3、总结","link":"#_3、总结","children":[]}],"git":{},"readingTime":{"minutes":2,"words":601},"filePathRelative":"note/Prometheus/8.1.Prometheus Operator.md","autoDesc":true}');export{d as comp,l as data};

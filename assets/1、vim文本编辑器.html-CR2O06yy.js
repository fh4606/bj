import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,d as s}from"./app-BvlpFik8.js";const a="/assets/1695613761.6064627-CbTHXyWQ.jpeg",n="/assets/1695613761.6186059-BaOhNH5y.png",o="/assets/1695613761.6480427-BSUtK7a3.png",l="/assets/1695613761.6607692-DIF8Q7kO.png",r="/assets/1695613761.672512-Csu_Q_Jj.jpeg",c="/assets/1695613761.682065-Dt0SMGAE.jpeg",p="/assets/1695613761.6947103-CEv39h1t.jpeg",d="/assets/1695613761.70504-C4Mc24DZ.jpeg",h="/assets/1695613761.7208998-C40lpVS5.jpeg",g="/assets/1695613761.730547-Dc1PM9Ii.jpeg",m={},u=s(`<blockquote><p>在 Linux 系统中一切都是文件，而配置一个服务就是在修改其配置文件的参数”。 而且在日常工作中大 家也肯定免不了要编写文档，这些工作都是通过文本编辑器来完成的。 Vim 文本编辑器，它默认会安装 在当前所有的 Linux 操作系统上，是一款超棒的文本编辑器。 Vim 之所以能得到广大厂商与用户的认可，原因在于 Vim 编辑器中设置了三种模式—命令模式、末行模式和编辑模式，每种模式分别又支持多 种不同的命令快捷键，这大大提高了工作效率，而且用户在习惯之后也会觉得相当顺手。要想高效率地 操作文本，就必须先搞清这三种模式的操作区别以及模式之间的切换方法 。</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>命令模式：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。</span></span>
<span class="line"><span>输入模式：正常的文本录入。</span></span>
<span class="line"><span>末行模式：保存或退出文档，以及设置编辑环境。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>在每次运行 Vim 编辑器时，默认进入命令模式，此时需要先切换到输入模式后再进行文档编写工作，而 每次在编写完文档后需要先返回命令模式，然后再进入末行模式，执行文档的保存或退出操作。在 Vim 中，无法直接从输入模式切换到末行模式。 Vim 编辑器中内置的命令有成百上千种用法，为了能够帮助 读者更快地掌握 Vim 编辑器，表 4-1 总结了在命令模式中最常用的一些命令。</p></blockquote><p>表 4-1 Vim 中常用的命令</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>末行模式主要用于保存或退出文件，以及设置 Vim 编辑器的工作环境，还可以让用户执行外部的 Linux 命令或跳转到所编写文档的特定行数。要想切换到末行模式，在命令模式中输入一个冒号就可以了。末 行模式中可用的命令如表 4-2 所示。</p></blockquote><p>表 4-2 末行模式中可用的命令</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="实例1-在当前目录下新建一个以-ceshi-命名的txt文档-并打开编辑它-输入-welcome-to-zhangxuewen-然后保存并-并查看输入内容" tabindex="-1"><a class="header-anchor" href="#实例1-在当前目录下新建一个以-ceshi-命名的txt文档-并打开编辑它-输入-welcome-to-zhangxuewen-然后保存并-并查看输入内容"><span>实例1：在当前目录下新建一个以“ceshi”命名的txt文档，并打开编辑它，输入： welcome to zhangxuewen ，然后保存并，并查看输入内容：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> [root@host-172-16-0-115 ~]# touch ceshi.txt //新建ceshi.txt文档</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@host-172-16-0-115 ~]# vim ceshi.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>//编辑ceshi.txt文件</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在弹出的界面中按键盘上“I”键更改为写入模式，并输入如下内容： welcome to zhangxuewen：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输入完成之后，按键盘上的“ESC”键，输入“:”号后，紧接着输入“x”，保存并推出</p><p>查看ceshi.txt内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@host-172-16-0-115 ~]# cat ceshi.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>学完以上后，对创建和编辑文件应有了一个新的了解，现在我们通过似乎用echo命令以及输出重定向和 管道符命令使上面的操作一步到位：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@host-172-16-0-115 ~]# touch ceshi.txt | echo &quot;welcome to zhangxuewen&quot; &gt; ceshi.txt | cat ceshi.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当然我们还可以在ceshi.txt文件尾行追加内容“ceshi”，我们依旧通过输出重定向和管道符命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@host-172-16-0-115 ~]# echo &quot;ceshi&quot; &gt;&gt; ceshi.txt | bash | cat ceshi.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',28),b=[u];function f(k,v){return t(),e("div",null,b)}const y=i(m,[["render",f],["__file","1、vim文本编辑器.html.vue"]]),E=JSON.parse('{"path":"/note/centos7/4%E3%80%81vim%E7%BC%96%E8%BE%91%E5%99%A8/1%E3%80%81vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.html","title":"01-vim编辑器","lang":"zh-CN","frontmatter":{"title":"01-vim编辑器","order":1,"icon":"lightbulb","description":"在 Linux 系统中一切都是文件，而配置一个服务就是在修改其配置文件的参数”。 而且在日常工作中大 家也肯定免不了要编写文档，这些工作都是通过文本编辑器来完成的。 Vim 文本编辑器，它默认会安装 在当前所有的 Linux 操作系统上，是一款超棒的文本编辑器。 Vim 之所以能得到广大厂商与用户的认可，原因在于 Vim 编辑器中设置了三种模式—命令模...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/note/centos7/4%E3%80%81vim%E7%BC%96%E8%BE%91%E5%99%A8/1%E3%80%81vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"风华"}],["meta",{"property":"og:title","content":"01-vim编辑器"}],["meta",{"property":"og:description","content":"在 Linux 系统中一切都是文件，而配置一个服务就是在修改其配置文件的参数”。 而且在日常工作中大 家也肯定免不了要编写文档，这些工作都是通过文本编辑器来完成的。 Vim 文本编辑器，它默认会安装 在当前所有的 Linux 操作系统上，是一款超棒的文本编辑器。 Vim 之所以能得到广大厂商与用户的认可，原因在于 Vim 编辑器中设置了三种模式—命令模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"风华"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01-vim编辑器\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"风华\\",\\"url\\":\\"/portfolio\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.81,"words":842},"filePathRelative":"note/centos7/4、vim编辑器/1、vim文本编辑器.md","autoDesc":true}');export{y as comp,E as data};
